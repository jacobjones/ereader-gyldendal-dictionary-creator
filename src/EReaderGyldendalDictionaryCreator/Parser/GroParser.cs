using System.Text;

namespace EReaderGyldendalDictionaryCreator.Parser;

internal class GroParser : IGroParser
{
    private static readonly byte[] Key = {
        0xBA, 0x59, 0xD9, 0xC2, 0x32, 0xB7, 0x21, 0x78, 0xB5, 0x86, 0x0C, 0x8C,
        0xA7, 0x3E, 0xA5, 0x12, 0xA2, 0xA4, 0x4B, 0x95, 0xE0, 0x31, 0xBD, 0x9E,
        0x4D, 0x86, 0x45, 0xCE, 0x17, 0xD5, 0x5D, 0x7D, 0x08, 0xC0, 0x52, 0x40,
        0xA3, 0x6E, 0x86, 0x1B, 0xD4, 0xAC, 0xBA, 0xC4, 0x5B, 0x2B, 0xC4, 0xE1,
        0x84, 0x12, 0x19, 0x91, 0x88, 0xB1, 0xEC, 0x5A, 0x52, 0x61, 0x39, 0x25,
        0xA8, 0x98, 0x07, 0x26, 0x35, 0x64, 0x5D, 0xA4, 0x98, 0x32, 0xDB, 0x57,
        0x57, 0x5A, 0xCC, 0xDD, 0x2A, 0x67, 0xE0, 0x11, 0x65, 0xC9, 0x61, 0x47,
        0x62, 0x79, 0x60, 0x6E, 0x22, 0x27, 0x17, 0x86, 0x67, 0x29, 0x72, 0x59,
        0x72, 0xB8, 0xDB, 0x14, 0x2D, 0x3A, 0x53, 0x72, 0x36, 0x4C, 0xC8, 0xED,
        0xC6, 0x2E, 0xEA, 0xE4, 0xBD, 0x23, 0x3D, 0x16, 0x0D, 0x53, 0x3C, 0x13,
        0xE0, 0x50, 0xC7, 0xBD, 0x3C, 0xB7, 0x92, 0x57, 0xEE, 0xD6, 0x14, 0xD5,
        0x5D, 0xBE, 0x3B, 0x9E, 0x4D, 0xEE, 0x4D, 0x63, 0x13, 0x05, 0x29, 0xCD,
        0x7D, 0x34, 0xD9, 0x2A, 0x10, 0xAE, 0xBB, 0xA7, 0x3B, 0x2A, 0x26, 0x20,
        0x79, 0x4C, 0x47, 0x2B, 0x0C, 0x65, 0x75, 0x09, 0xB4, 0xC3, 0x36, 0x75,
        0x87, 0x25, 0x61, 0xA1, 0xA3, 0xB4, 0x44, 0x68, 0xDE, 0xDD, 0x45, 0x0C,
        0xB8, 0xED, 0x8E, 0xC1, 0x2E, 0x4B, 0x5C, 0x4E, 0x15, 0x93, 0x8B, 0x46,
        0xC3, 0x53, 0x79, 0x02, 0x74, 0x8D, 0x2C, 0x7B, 0x6A, 0x25, 0x09, 0x31,
        0x9E, 0xBE, 0xAB, 0x40, 0x38, 0x04, 0x98, 0x87, 0xD1, 0x40, 0x36, 0xC4,
        0xDD, 0xCC, 0x9E, 0x53, 0x03, 0x98, 0xC1, 0x7A, 0xE8, 0x98, 0xB2, 0x1C,
        0x29, 0x6D, 0x53, 0xC2, 0x26, 0x1B, 0xE7, 0x64, 0x2C, 0x45, 0xEE, 0xAC,
        0x98, 0x0A, 0xB3, 0x8A, 0xBE, 0xA0, 0x77, 0xDB, 0x66, 0x65, 0x0A, 0xB7,
        0x25, 0x6E, 0xCB, 0xD2, 0xD8, 0x4B, 0x32, 0x6D, 0xD5, 0xE0, 0xB6, 0xBA,
        0xE7, 0xE8, 0x84, 0xCE, 0xC7, 0x76, 0xC9, 0xC0, 0x07, 0x1D, 0x21, 0x83,
        0x07, 0x69, 0xAA, 0xBA, 0x9A, 0xE4, 0xC5, 0x99, 0xB4, 0xEA, 0x90, 0x14,
        0x7E, 0xE3, 0x5C, 0x7D, 0xEA, 0x70, 0xC2, 0x41, 0xBB, 0xB1, 0x97, 0x39,
        0xD6, 0x2C, 0x1D, 0x80, 0x62, 0x1A, 0xA7, 0x5C, 0x31, 0x51, 0xC9, 0xB8,
        0x0D, 0xEC, 0x30, 0xA0, 0xA5, 0x5D, 0x99, 0xB1, 0x17, 0x9A, 0x08, 0x53,
        0x6E, 0xC8, 0x21, 0xB4, 0xA8, 0xC2, 0xDA, 0xB5, 0x71, 0xE5, 0x27, 0x28,
        0x44, 0xE4, 0x01, 0x87, 0x7A, 0x63, 0x22, 0xC9, 0x81, 0x31, 0xC8, 0x26,
        0xB3, 0x3E, 0x8E, 0x1D, 0xC4, 0x3C, 0x27, 0x38, 0x04, 0x92, 0x37, 0x35,
        0x35, 0xC0, 0x31, 0xAA, 0x18, 0x8B, 0xC9, 0xE8, 0x98, 0x6D, 0xD0, 0x71,
        0xC9, 0x08, 0xDE, 0x23, 0x0D, 0xA2, 0x20, 0x9A, 0x87, 0xA8, 0xD6, 0xB6,
        0x51, 0x8A, 0x05, 0x63, 0xDB, 0x39, 0x02, 0xB2, 0x64, 0xBE, 0xDB, 0x58,
        0xDA, 0x46, 0x4D, 0x25, 0xD9, 0x3C, 0x66, 0x29, 0x66, 0x36, 0xC0, 0xA5,
        0xA8, 0x28, 0xAB, 0x78, 0xA0, 0xC5
    };

    public string ParseEntry(int entryId, byte[] bytes)
    {
        var keyOffset = (entryId + 0x170A8) * 1103 % 414;

        IList<char> chars = bytes.Select((t, i) => (t ^ Key[(i + keyOffset) % 414]) & 0xff).Select(encrypt => (char)encrypt).ToList();

        return Encoding.UTF8.GetString(Encoding.GetEncoding("ISO-8859-1").GetBytes(chars.ToArray()));
    }
}